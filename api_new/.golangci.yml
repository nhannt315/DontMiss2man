# this file is used for golangci-lint command,
# with lint checking rules
run:
  # default concurrency is a available CPU number
  #concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 1m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: false

  # which dirs to skip: issues from them won't be reported;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but default dirs are skipped independently
  # from this option's value (see skip-dirs-use-default).
  skip-dirs:

  # default is true. Enables skipping of directories:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs-use-default: true

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files:
    - ".*_generate\\.go$"
    - ".*\\.pb\\.go$"

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

  # make issues output unique by line, default is true
  uniq-by-line: true

linters:
  enable-all: false
  enable:
    - deadcode # Finds unused code
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs.
    - gosimple # Linter for Go source code that specializes in simplifying a code
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # Detects when assignments to existing variables are not used
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - structcheck # Finds an unused struct fields
    - typecheck # Like the front-end of a Go compiler, parses and type-checks Go cod
    - unused # Checks Go code for unused constants, variables, functions and types
    - varcheck # Finds unused global variables and constants
    - bodyclose # checks whether HTTP response body is closed successfully
    - depguard # Go linter that checks if package imports are in a list of acceptable packages
    - errorlint # source code linter for Go software that can be used to find code that will cause problemswith the error wrapping scheme
    - exhaustive # check exhaustiveness of enum switch statements
    - exportloopref # checks for pointers to enclosing loop variables
    - gocognit #  Computes and checks the cognitive complexity of functions
    - goconst # Finds repeated strings that could be replaced by a constant
    - gocritic # The most opinionated Go source code linte
    #    - golint # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes
    - gosec # Inspects source code for security problems
    - misspell # Finds commonly misspelled English words in comments
    - nakedret # Finds naked returns in functions greater than a specified function length
    - prealloc # Finds slice declarations that could potentially be preallocated
    #    - scopelint # Scopelint checks for unpinned variables in go programs
    - unconvert # Remove unnecessary type conversions
    - unparam # Reports unused function parameters
    - revive # revive differs from gofmt. Gofmt reformats Go source code, whereas revive prints out style mistakes
    - exportloopref # Scopelint checks for unpinned variables in go programs

linters-settings:
  depguard:
    list-type: blacklist
    packages:
      # logging is allowed only by logutils.Log, logrus
      # is allowed to use only in logutils package
      - errors # これは実はチェックできてない。ここをやるとすると自前でAnalizerとかつくらないときっとダメだな。
      - github.com/pkg/errors
      - golang.org/x/xerrors

  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true

    # path to a file containing a list of functions to exclude from checking
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    exclude:

  govet:
    check-shadowing: false
    settings:
      printf:
        funcs:
          - Errorf
          - Warnf
          - Infof
          - Wrapf
          - ErrorfWithStack
          - WarnfWithStack

  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    # 実際にエラーになったコードがそれほど複雑でなければこの値を上げてもいいが、20以上にはしたくない。
    min-complexity: 15
  golint:
    min-confidence: 0 # default 0.8. 小さいほど厳しくなる
  goconst:
    min-len: 2
    min-occurrences: 2
  misspell:
    locale: US
  goimports:
    local-prefixes: github.com/moneyforward/osugi
  gocritic:
  exhaustive:
    # check switch statements in generated files also
    check-generated: false
    # indicates that switch statements are to be considered exhaustive if a
    # 'default' case is present, even if all enum members aren't listed in the
    # switch
    default-signifies-exhaustive: true

issues:
  exclude-use-default: true
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: pkg/errors/error.go
      linters:
        - depguard
        - errorlint

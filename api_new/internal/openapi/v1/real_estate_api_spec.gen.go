// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qn8FAAD//0/d//8REQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

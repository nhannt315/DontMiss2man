// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NRyL43gs/isAAP//DdDtZS4RAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Code generated by MockGen. DO NOT EDIT.
// Source: datetime.go

// Package mock_datetime is a generated GoMock package.
package mock_datetime

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	datetime "github.com/nhannt315/real_estate_api/pkg/datetime"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Calendar mocks base method.
func (m *MockManager) Calendar() datetime.Calendar {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calendar")
	ret0, _ := ret[0].(datetime.Calendar)
	return ret0
}

// Calendar indicates an expected call of Calendar.
func (mr *MockManagerMockRecorder) Calendar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calendar", reflect.TypeOf((*MockManager)(nil).Calendar))
}

// Clock mocks base method.
func (m *MockManager) Clock() datetime.Clock {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clock")
	ret0, _ := ret[0].(datetime.Clock)
	return ret0
}

// Clock indicates an expected call of Clock.
func (mr *MockManagerMockRecorder) Clock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clock", reflect.TypeOf((*MockManager)(nil).Clock))
}

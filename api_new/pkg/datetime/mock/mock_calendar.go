// Code generated by MockGen. DO NOT EDIT.
// Source: calendar.go

// Package mock_datetime is a generated GoMock package.
package mock_datetime

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	datetime "github.com/nhannt315/real_estate_api/pkg/datetime"
)

// MockCalendar is a mock of Calendar interface.
type MockCalendar struct {
	ctrl     *gomock.Controller
	recorder *MockCalendarMockRecorder
}

// MockCalendarMockRecorder is the mock recorder for MockCalendar.
type MockCalendarMockRecorder struct {
	mock *MockCalendar
}

// NewMockCalendar creates a new mock instance.
func NewMockCalendar(ctrl *gomock.Controller) *MockCalendar {
	mock := &MockCalendar{ctrl: ctrl}
	mock.recorder = &MockCalendarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalendar) EXPECT() *MockCalendarMockRecorder {
	return m.recorder
}

// CurrentDate mocks base method.
func (m *MockCalendar) CurrentDate() *datetime.Date {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentDate")
	ret0, _ := ret[0].(*datetime.Date)
	return ret0
}

// CurrentDate indicates an expected call of CurrentDate.
func (mr *MockCalendarMockRecorder) CurrentDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentDate", reflect.TypeOf((*MockCalendar)(nil).CurrentDate))
}

// NewDate mocks base method.
func (m *MockCalendar) NewDate(year int, month time.Month, day int) *datetime.Date {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDate", year, month, day)
	ret0, _ := ret[0].(*datetime.Date)
	return ret0
}

// NewDate indicates an expected call of NewDate.
func (mr *MockCalendarMockRecorder) NewDate(year, month, day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDate", reflect.TypeOf((*MockCalendar)(nil).NewDate), year, month, day)
}

// NewNullDate mocks base method.
func (m *MockCalendar) NewNullDate(d *datetime.Date) *datetime.NullDate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNullDate", d)
	ret0, _ := ret[0].(*datetime.NullDate)
	return ret0
}

// NewNullDate indicates an expected call of NewNullDate.
func (mr *MockCalendarMockRecorder) NewNullDate(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNullDate", reflect.TypeOf((*MockCalendar)(nil).NewNullDate), d)
}

// ParseDate mocks base method.
func (m *MockCalendar) ParseDate(s, layout string) (*datetime.Date, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseDate", s, layout)
	ret0, _ := ret[0].(*datetime.Date)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseDate indicates an expected call of ParseDate.
func (mr *MockCalendarMockRecorder) ParseDate(s, layout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseDate", reflect.TypeOf((*MockCalendar)(nil).ParseDate), s, layout)
}
